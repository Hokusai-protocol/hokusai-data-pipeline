version: '3.8'

services:
  # PostgreSQL database for MLFlow backend
  postgres:
    image: postgres:14-alpine
    container_name: hokusai_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-mlflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-mlflow_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible artifact storage
  minio:
    image: minio/minio:latest
    container_name: hokusai_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Create MinIO bucket for MLFlow
  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc mb minio/mlflow-artifacts || true;
      mc policy set public minio/mlflow-artifacts;
      exit 0;
      "

  # MLFlow tracking server
  mlflow-server:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: hokusai_mlflow
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER:-mlflow}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB:-mlflow_db}
      --default-artifact-root s3://mlflow-artifacts/
      --host 0.0.0.0
      --port 5000
    ports:
      - "5001:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Model Registry API service
  model-registry-api:
    build:
      context: .
      dockerfile: Dockerfile.api.minimal
    container_name: hokusai_api
    depends_on:
      mlflow-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      MLFLOW_TRACKING_URI: http://mlflow-server:5000
      MLFLOW_SERVER_URL: http://mlflow-server:5000
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      API_HOST: 0.0.0.0
      API_PORT: 8001
      POSTGRES_URI: postgresql://${POSTGRES_USER:-mlflow}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB:-mlflow_db}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: postgres
      DB_NAME: ${POSTGRES_DB:-mlflow_db}
      DB_USER: ${POSTGRES_USER:-mlflow}
      # Redis configuration - uses local Redis by default, override with .env for ElastiCache
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_AUTH_TOKEN: ${REDIS_AUTH_TOKEN:-}
      HOKUSAI_AUTH_SERVICE_URL: https://auth.hokus.ai
      AUTH_SERVICE_TIMEOUT: 5.0
    ports:
      - "8001:8001"
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: hokusai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: hokusai_prometheus
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: hokusai_grafana
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"

volumes:
  postgres_data:
  minio_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: hokusai_network