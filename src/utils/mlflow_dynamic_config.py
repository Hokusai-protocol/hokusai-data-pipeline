"""
Dynamic MLflow configuration that adapts to the deployment environment.
Auto-generated by update_mlflow_config.py
"""

import os
import subprocess
import json
import logging

logger = logging.getLogger(__name__)


def get_mlflow_tracking_uri():
    """
    Dynamically determine MLflow tracking URI based on environment.
    
    Returns:
        str: The MLflow tracking URI to use
    """
    # Priority 1: Environment variable
    if uri := os.getenv("MLFLOW_TRACKING_URI"):
        return uri
    
    # Priority 2: ECS Service Discovery
    if os.path.exists("/etc/ecs/ecs.config"):
        return "http://mlflow.hokusai-development.local:5000"
    
    # Priority 3: Try to get current IP from ECS (for external access)
    try:
        result = subprocess.run(
            ["aws", "ecs", "list-tasks", "--cluster", "hokusai-development",
             "--service-name", "hokusai-mlflow-development", "--region", "us-east-1"],
            capture_output=True, text=True, timeout=5
        )
        if result.returncode == 0:
            tasks = json.loads(result.stdout)
            if tasks.get("taskArns"):
                task_arn = tasks["taskArns"][0]
                result = subprocess.run(
                    ["aws", "ecs", "describe-tasks", "--cluster", "hokusai-development",
                     "--tasks", task_arn, "--region", "us-east-1"],
                    capture_output=True, text=True, timeout=5
                )
                if result.returncode == 0:
                    task_details = json.loads(result.stdout)
                    for task in task_details.get("tasks", []):
                        for attachment in task.get("attachments", []):
                            for detail in attachment.get("details", []):
                                if detail.get("name") == "privateIPv4Address":
                                    ip = detail.get("value")
                                    if ip:
                                        logger.info(f"Found MLflow service IP: {ip}")
                                        return f"http://{ip}:5000"
    except Exception as e:
        logger.debug(f"Could not get ECS IP: {e}")
    
    # Priority 4: Default fallback
    default = "http://10.0.3.219:5000"  # Current known IP
    logger.info(f"Using default MLflow URI: {default}")
    return default


# Export the function for use in other modules
MLFLOW_TRACKING_URI = get_mlflow_tracking_uri()
