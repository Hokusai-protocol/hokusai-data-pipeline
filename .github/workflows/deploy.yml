name: Deploy to AWS

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_API: hokusai-api
  ECR_REPOSITORY_MLFLOW: hokusai-mlflow

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-api.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install from resolved requirements
        pip install --timeout=300 -r requirements.txt
        pip install --timeout=300 -r requirements-api.txt
    
    - name: Run linting
      run: |
        pip install ruff
        # Temporarily allow linting issues while we fix tests
        ruff check src/ tests/ || true
    
    - name: Run tests with pytest
      run: |
        # Install pytest plugins for performance
        pip install pytest-timeout pytest-xdist
        # Run all unit tests with coverage, timeout, and parallel execution
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing --timeout=30 --timeout-method=thread -n auto
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: github.event_name == 'push'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read
    
    outputs:
      api-image: ${{ steps.build-api.outputs.image }}
      mlflow-image: ${{ steps.build-mlflow.outputs.image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push API Docker image
      id: build-api
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile.api -t $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Build and push MLflow Docker image
      id: build-mlflow
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile.mlflow -t $ECR_REGISTRY/$ECR_REPOSITORY_MLFLOW:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_MLFLOW:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_MLFLOW:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MLFLOW:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MLFLOW:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_MLFLOW:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read
      issues: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Update ECS Services
      run: |
        # Update ECS services with new images
        # First update task definitions with new image tags
        
        # Get ECR registry URL
        ECR_REGISTRY=$(aws ecr describe-repositories --repository-names hokusai-api --query 'repositories[0].repositoryUri' --output text | cut -d'/' -f1)
        IMAGE_TAG=${{ github.sha }}
        
        # Update API task definition
        TASK_DEF=$(aws ecs describe-task-definition --task-definition hokusai-api-development --query 'taskDefinition')
        NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "$ECR_REGISTRY/hokusai-api:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
        echo "$NEW_TASK_DEF" > /tmp/api-task-def.json
        API_TASK_ARN=$(aws ecs register-task-definition --cli-input-json file:///tmp/api-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Update MLflow task definition
        TASK_DEF=$(aws ecs describe-task-definition --task-definition hokusai-mlflow-development --query 'taskDefinition')
        NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "$ECR_REGISTRY/hokusai-mlflow:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
        echo "$NEW_TASK_DEF" > /tmp/mlflow-task-def.json
        MLFLOW_TASK_ARN=$(aws ecs register-task-definition --cli-input-json file:///tmp/mlflow-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Update services with new task definitions
        aws ecs update-service \
          --cluster hokusai-development \
          --service hokusai-api \
          --task-definition $API_TASK_ARN \
          --force-new-deployment \
          --desired-count 2
        
        aws ecs update-service \
          --cluster hokusai-development \
          --service hokusai-mlflow \
          --task-definition $MLFLOW_TASK_ARN \
          --force-new-deployment \
          --desired-count 1
        
        echo "✅ Services updated with new task definitions"
    
    - name: Run deployment validation
      run: |
        chmod +x ./infrastructure/scripts/validate.sh
        ./infrastructure/scripts/validate.sh || true
    
    - name: Deployment Summary
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment to development completed successfully!"
        else
          echo "❌ Deployment to development failed. Please check the logs."
        fi